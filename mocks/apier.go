// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jackdallas/starr (interfaces: APIer)

// Package mock_starr is a generated GoMock package.
package mock_starr

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIer is a mock of APIer interface.
type MockAPIer struct {
	ctrl     *gomock.Controller
	recorder *MockAPIerMockRecorder
}

// MockAPIerMockRecorder is the mock recorder for MockAPIer.
type MockAPIerMockRecorder struct {
	mock *MockAPIer
}

// NewMockAPIer creates a new mock instance.
func NewMockAPIer(ctrl *gomock.Controller) *MockAPIer {
	mock := &MockAPIer{ctrl: ctrl}
	mock.recorder = &MockAPIerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIer) EXPECT() *MockAPIerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAPIer) Get(arg0 string, arg1 url.Values) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAPIerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPIer)(nil).Get), arg0, arg1)
}

// GetInto mocks base method.
func (m *MockAPIer) GetInto(arg0 string, arg1 url.Values, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInto", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInto indicates an expected call of GetInto.
func (mr *MockAPIerMockRecorder) GetInto(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInto", reflect.TypeOf((*MockAPIer)(nil).GetInto), arg0, arg1, arg2)
}

// Post mocks base method.
func (m *MockAPIer) Post(arg0 string, arg1 url.Values, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockAPIerMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockAPIer)(nil).Post), arg0, arg1, arg2)
}

// PostInto mocks base method.
func (m *MockAPIer) PostInto(arg0 string, arg1 url.Values, arg2 []byte, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInto", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInto indicates an expected call of PostInto.
func (mr *MockAPIerMockRecorder) PostInto(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInto", reflect.TypeOf((*MockAPIer)(nil).PostInto), arg0, arg1, arg2, arg3)
}
